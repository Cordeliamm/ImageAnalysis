import argparse
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

parser = argparse.ArgumentParser()
parser.add_argument('--input_dir', type=str, default='data/GeneratedImages', help='Root directory of images')
parser.add_argument('--output_csv', type=str, default='data/face_attributes_all.csv', help='Output CSV file')
args = parser.parse_args()

root_dir = args.input_dir
output_file = args.output_csv
results = []

for prompt_type in os.listdir(root_dir):
    prompt_path = os.path.join(root_dir, prompt_type)
    if not os.path.isdir(prompt_path):
        continue

    for platform in os.listdir(prompt_path):
        platform_path = os.path.join(prompt_path, platform)
        if not os.path.isdir(platform_path):
            continue

        image_files = glob.glob(os.path.join(platform_path, "*.jpg")) + \
                      glob.glob(os.path.join(platform_path, "*.png"))
        print(f"Found {len(image_files)} images in {prompt_type}/{platform}")

        for img_path in tqdm(image_files, desc=f"Analyzing {prompt_type}/{platform}"):
            try:
                analysis = DeepFace.analyze(
                    img_path=img_path,
                    actions=['age', 'gender', 'race'],
                    enforce_detection=False,
                    detector_backend='opencv'  
                )
                data = analysis[0] if isinstance(analysis, list) else analysis

                results.append({
                    "image": os.path.basename(img_path),
                    "age": data.get("age", None),
                    "gender": data.get("dominant_gender", ""),
                    "race": data.get("dominant_race", ""),
                    "platform": platform,
                    "prompt_type": prompt_type
                })

            except Exception as e:
                print(f"Failed to analyze {img_path}: {e}")
                traceback.print_exc()

df = pd.DataFrame(results)
df.to_csv(output_file, index=False)

def print_summary_stats(df):
    for (prompt_type, platform), group in df.groupby(['prompt_type', 'platform']):
        print(f"\n--- {prompt_type.upper()} | {platform.upper()} ---")
        print("\nGender Counts:\n", group['gender'].value_counts(dropna=False))
        print("\nRace Counts:\n", group['race'].value_counts(dropna=False))
        print("\nAge Summary:\n", group['age'].describe())
